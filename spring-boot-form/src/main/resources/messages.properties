!-Forma de hacerlo general, se anota el nombre de la anotaci�n de javax seguido del mensaje
NotEmpty = El campo no puede estar vacio
!- Otra manera de hacerlo es especificando la etiquete+nombre del objeto con el que se mapea el form con el entity yseguido del mensaje
NotEmpty.usuario.nombre = El campo nombre puede estar vacío
NotEmpty.usuario.username = El username es obligatorio
Email.usuario.email = El formato del correo es incorrecto
usuario.password.error = La contraseña no coincide con el patrón definido
!- Para personalizar un mensaje de una anotación creada por nosotros la estructura deber ser:
!- Nobre de la anotacion tal cual la creamos+nombre del objeto que mapeamos al form + nombre del atributo del bean o entity
Requerido.usuario.email = El campo email es obligatorio
!-typeMismatch.java.lang.Integer es una palbra reservada para evitar el mensaje de error de numberFormatException de java y se usa en properties
!-y es de forma general para cualquier campo 
typeMismatch.java.lang.Integer=Debe ser un entero o número
!- Si queremos personalizar el mensaje de error para campo especifico con número o entero:
!- Se usa la palabra reserveda typeMismatch+nombre de objeto mapeado al form + nombre del atributo del bean o entity
typeMismatch.usuario.cuenta = el campo cuenta debe cuumplir con el rango 2-5 y debe ser entero
!-- typeMismatch.java.util.Date se usa para validar que el valor recibido sea una fecha y evitamos excepcion de java para fecha
typeMismatch.java.util.Date = Debe ser una fecha con formato yyyy-MM-dd
Past.usuario.fechaNacimiento = La fecha debe ser en pasado